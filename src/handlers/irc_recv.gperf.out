/* ANSI-C code produced by gperf version 3.1 */
/* Command-line: gperf --output-file=src/handlers/irc_recv.gperf.out src/handlers/irc_recv.gperf  */
/* Computed positions: -k'1-2' */

#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
/* The character set is not based on ISO-646.  */
#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
#endif

#line 1 "src/handlers/irc_recv.gperf"

#include <string.h>

#define RECV_HANDLERS \
	X(error) \
	X(invite) \
	X(join) \
	X(kick) \
	X(mode) \
	X(nick) \
	X(notice) \
	X(part) \
	X(ping) \
	X(pong) \
	X(privmsg) \
	X(quit) \
	X(topic) \
	X(ircv3_account) \
	X(ircv3_authenticate) \
	X(ircv3_away) \
	X(ircv3_cap) \
	X(ircv3_chghost)

#define X(cmd) static int recv_##cmd(struct server*, struct irc_message*);
RECV_HANDLERS
#undef X

typedef int (*irc_recv_f)(struct server*, struct irc_message*);

struct recv_handler
{
	char *key;
	irc_recv_f f;
};
#line 46 "src/handlers/irc_recv.gperf"
struct recv_handler;
/* maximum key range = 36, duplicates = 0 */

#ifdef __GNUC__
__inline
#else
#ifdef __cplusplus
inline
#endif
#endif
static unsigned int
recv_handler_hash (register const char *str, register size_t len)
{
  static const unsigned char asso_values[] =
    {
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 15, 40,  0, 40,  5,
      40, 40, 10,  5,  8, 30, 40, 30,  5,  0,
       0, 25,  0, 40,  0,  0, 40,  5, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
      40, 40, 40, 40, 40, 40
    };
  return len + asso_values[(unsigned char)str[1]] + asso_values[(unsigned char)str[0]];
}

const struct recv_handler *
recv_handler_lookup (register const char *str, register size_t len)
{
  enum
    {
      TOTAL_KEYWORDS = 18,
      MIN_WORD_LENGTH = 3,
      MAX_WORD_LENGTH = 12,
      MIN_HASH_VALUE = 4,
      MAX_HASH_VALUE = 39
    };

  static const struct recv_handler recv_handlers[] =
    {
      {(char*)0,(irc_recv_f)0}, {(char*)0,(irc_recv_f)0},
      {(char*)0,(irc_recv_f)0}, {(char*)0,(irc_recv_f)0},
#line 57 "src/handlers/irc_recv.gperf"
      {"PONG",         recv_pong},
#line 60 "src/handlers/irc_recv.gperf"
      {"TOPIC",        recv_topic},
      {(char*)0,(irc_recv_f)0},
#line 58 "src/handlers/irc_recv.gperf"
      {"PRIVMSG",      recv_privmsg},
      {(char*)0,(irc_recv_f)0},
#line 56 "src/handlers/irc_recv.gperf"
      {"PING",         recv_ping},
#line 48 "src/handlers/irc_recv.gperf"
      {"ERROR",        recv_error},
#line 54 "src/handlers/irc_recv.gperf"
      {"NOTICE",       recv_notice},
#line 50 "src/handlers/irc_recv.gperf"
      {"JOIN",         recv_join},
      {(char*)0,(irc_recv_f)0},
#line 53 "src/handlers/irc_recv.gperf"
      {"NICK",         recv_nick},
      {(char*)0,(irc_recv_f)0},
#line 49 "src/handlers/irc_recv.gperf"
      {"INVITE",       recv_invite},
#line 65 "src/handlers/irc_recv.gperf"
      {"CHGHOST",      recv_ircv3_chghost},
#line 64 "src/handlers/irc_recv.gperf"
      {"CAP",          recv_ircv3_cap},
#line 55 "src/handlers/irc_recv.gperf"
      {"PART",         recv_part},
      {(char*)0,(irc_recv_f)0}, {(char*)0,(irc_recv_f)0},
#line 61 "src/handlers/irc_recv.gperf"
      {"ACCOUNT",      recv_ircv3_account},
      {(char*)0,(irc_recv_f)0},
#line 63 "src/handlers/irc_recv.gperf"
      {"AWAY",         recv_ircv3_away},
      {(char*)0,(irc_recv_f)0}, {(char*)0,(irc_recv_f)0},
#line 62 "src/handlers/irc_recv.gperf"
      {"AUTHENTICATE", recv_ircv3_authenticate},
      {(char*)0,(irc_recv_f)0},
#line 59 "src/handlers/irc_recv.gperf"
      {"QUIT",         recv_quit},
      {(char*)0,(irc_recv_f)0}, {(char*)0,(irc_recv_f)0},
      {(char*)0,(irc_recv_f)0}, {(char*)0,(irc_recv_f)0},
#line 52 "src/handlers/irc_recv.gperf"
      {"MODE",         recv_mode},
      {(char*)0,(irc_recv_f)0}, {(char*)0,(irc_recv_f)0},
      {(char*)0,(irc_recv_f)0}, {(char*)0,(irc_recv_f)0},
#line 51 "src/handlers/irc_recv.gperf"
      {"KICK",         recv_kick}
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      register unsigned int key = recv_handler_hash (str, len);

      if (key <= MAX_HASH_VALUE)
        {
          register const char *s = recv_handlers[key].key;

          if (s && *str == *s && !strcmp (str + 1, s + 1))
            return &recv_handlers[key];
        }
    }
  return 0;
}
#line 66 "src/handlers/irc_recv.gperf"

